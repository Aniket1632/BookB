{"ast":null,"code":"import axios from 'axios';\nimport { CREATE_NEW_ONBOARD_USER_REQUEST, CREATE_NEW_ONBOARD_USER_SUCCESS, CREATE_NEW_ONBOARD_USER_FAIL, PAYMENT_ONBOARD_REQUEST, PAYMENT_ONBOARD_SUCCESS, PAYMENT_ONBOARD_FAIL, ONBOARD_DONE_REQUEST, ONBOARD_DONE_SUCCESS, ONBOARD_DONE_FAIL } from '../constants/onboardingConstants';\nimport { BASE_URL } from './ip';\nconst utcTimeOffset = new Date().getTimezoneOffset();\nexport const onBoardNewUserAction = userData => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CREATE_NEW_ONBOARD_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post(`${BASE_URL}/users/onboard-signup?offset=${utcTimeOffset}`, userData, config);\n    dispatch({\n      type: CREATE_NEW_ONBOARD_USER_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: CREATE_NEW_ONBOARD_USER_FAIL,\n      payload: err.response && err.response.data.message ? err.response.data.message : err.message\n    });\n  }\n};\nexport const onBoardAdminAction = formData => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PAYMENT_ONBOARD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post(`${BASE_URL}/users/onboard`, formData, config);\n    dispatch({\n      type: PAYMENT_ONBOARD_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: PAYMENT_ONBOARD_FAIL,\n      payload: err.response && err.response.data.message ? err.response.data.message : err.message\n    });\n  }\n};\nexport const completeOnboardAction = formData => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ONBOARD_DONE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post(`${BASE_URL}/users/onboard-done`, formData, config);\n    dispatch({\n      type: ONBOARD_DONE_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: ONBOARD_DONE_FAIL,\n      payload: err.response && err.response.data.message ? err.response.data.message : err.message\n    });\n  }\n};","map":{"version":3,"names":["axios","CREATE_NEW_ONBOARD_USER_REQUEST","CREATE_NEW_ONBOARD_USER_SUCCESS","CREATE_NEW_ONBOARD_USER_FAIL","PAYMENT_ONBOARD_REQUEST","PAYMENT_ONBOARD_SUCCESS","PAYMENT_ONBOARD_FAIL","ONBOARD_DONE_REQUEST","ONBOARD_DONE_SUCCESS","ONBOARD_DONE_FAIL","BASE_URL","utcTimeOffset","Date","getTimezoneOffset","onBoardNewUserAction","userData","dispatch","getState","type","config","headers","data","post","payload","err","response","message","onBoardAdminAction","formData","completeOnboardAction"],"sources":["E:/D-Disk folders/office projects/barberly/frontend/src/redux/actions/onboardingActions.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n\tCREATE_NEW_ONBOARD_USER_REQUEST,\r\n\tCREATE_NEW_ONBOARD_USER_SUCCESS,\r\n\tCREATE_NEW_ONBOARD_USER_FAIL,\r\n\r\n\tPAYMENT_ONBOARD_REQUEST,\r\n\tPAYMENT_ONBOARD_SUCCESS,\r\n\tPAYMENT_ONBOARD_FAIL,\r\n\r\n\tONBOARD_DONE_REQUEST,\r\n\tONBOARD_DONE_SUCCESS,\r\n\tONBOARD_DONE_FAIL,\r\n} from '../constants/onboardingConstants';\r\n\r\nimport { BASE_URL } from './ip';\r\nconst utcTimeOffset = new Date().getTimezoneOffset();\r\n\r\nexport const onBoardNewUserAction = (userData) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: CREATE_NEW_ONBOARD_USER_REQUEST });\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.post(`${BASE_URL}/users/onboard-signup?offset=${utcTimeOffset}`, userData, config);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: CREATE_NEW_ONBOARD_USER_SUCCESS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: CREATE_NEW_ONBOARD_USER_FAIL,\r\n\t\t\tpayload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const onBoardAdminAction = (formData) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: PAYMENT_ONBOARD_REQUEST });\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.post(`${BASE_URL}/users/onboard`, formData, config);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: PAYMENT_ONBOARD_SUCCESS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: PAYMENT_ONBOARD_FAIL,\r\n\t\t\tpayload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const completeOnboardAction = (formData) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: ONBOARD_DONE_REQUEST });\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.post(`${BASE_URL}/users/onboard-done`, formData, config);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: ONBOARD_DONE_SUCCESS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: ONBOARD_DONE_FAIL,\r\n\t\t\tpayload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}