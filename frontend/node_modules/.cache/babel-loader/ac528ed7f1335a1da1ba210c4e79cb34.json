{"ast":null,"code":"export const validateOnlyChacters = name => {\n  const re = /^[a-zA-Z \\s]+$/;\n  return re.test(name);\n};\nexport const validatePassword = password => {\n  const re = /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[$@$!%*?&#])[A-Za-z\\d$@$!%*?&#]{7,}$/;\n  return re.test(password);\n};\nexport const validateEmail = email => {\n  const re = /[a-zA-Z0-9!#$%&'*+=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n  return re.test(email);\n};\nexport const validatePhone = phone => {\n  // const re = /^[0-9]{10}$/;\n  const re = /^[0-9]{10}$/;\n  return re.test(phone);\n};\nexport const validateUrl = url => {\n  const re = /[(http(s)?):(www.)?a-zA-Z0-9@:%._~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_.~#?&//=]*)/g;\n  return re.test(url);\n};\nexport const validateOnlyNumber = name => {\n  const re = /^[0-9 \\s]+$/;\n  return re.test(name);\n};\nexport const validateOnlyNumberDecimal = name => {\n  const re = /^[+-]?([0-9]+\\.?[5]*|\\.[0-9]+)$/;\n  return re.test(name);\n};\nexport const numberMasking = e => {\n  let value = e;\n  value = value.replace(/\\D/g, \"\");\n  // value = value.replace(/(\\d{3})(\\d)/,\"$1-$2\")\n  // value = value.replace(/(\\d{3})(\\d)/,\"$1-$2\")\n  value = value.substr(0, 12);\n  return value;\n};\nexport const inputPhoneMasking = e => {\n  let value = e;\n  if (value) {\n    value = value.replace(/\\D/g, \"\");\n    value = value.replace(/(\\d{3})(\\d)/, \"$1-$2\");\n    value = value.replace(/(\\d{3})(\\d)/, \"$1-$2\");\n    value = value.substr(0, 12);\n  }\n  return value;\n};\nexport const cardMasking = e => {\n  let value = e;\n  value = value.replace(/\\D/g, \"\");\n  value = value.replace(/(\\d{4})(\\d)/, \"$1-$2\");\n  value = value.replace(/(\\d{4})(\\d)/, \"$1-$2\");\n  value = value.replace(/(\\d{4})(\\d)/, \"$1-$2\");\n  value = value.substr(0, 19);\n  return value;\n};\nexport const expiryMasking = e => {\n  let value = e;\n  value = value.replace(/\\D/g, \"\");\n  value = value.replace(/(\\d{2})(\\d)/, \"$1-$2\");\n  value = value.substr(0, 2);\n  return value;\n};\nexport const cvvMasking = e => {\n  let value = e;\n  value = value.replace(/\\D/g, \"\");\n  value = value.replace(/(\\d{3})(\\d)/, \"$1-$2\");\n  value = value.substr(0, 3);\n  return value;\n};\nexport const zipcodeMask = e => {\n  let value = e;\n  value = value.replace(/\\D/g, \"\");\n  value = value.replace(/(\\d{5})(\\d)/, \"$1-$2\");\n  value = value.substr(0, 5);\n  return value;\n};\nexport const unMasking = e => {\n  let value = e;\n  value = value.replaceAll(\"-\", \"\");\n  return value;\n};\nexport const formatNumber = num => {\n  if (num >= 1000) {\n    const units = ['K', 'M', 'B', 'T'];\n    const unitIndex = Math.floor((num / 1000).toString().length / 3) - 1;\n    const shortenedNumber = num / Math.pow(1000, unitIndex + 1);\n\n    // Round the number to one decimal place\n    const roundedNumber = Math.floor(shortenedNumber * 10) / 10;\n    return `${roundedNumber.toFixed(1)}${units[unitIndex]}`;\n  } else {\n    return num;\n  }\n};","map":{"version":3,"names":["validateOnlyChacters","name","re","test","validatePassword","password","validateEmail","email","validatePhone","phone","validateUrl","url","validateOnlyNumber","validateOnlyNumberDecimal","numberMasking","e","value","replace","substr","inputPhoneMasking","cardMasking","expiryMasking","cvvMasking","zipcodeMask","unMasking","replaceAll","formatNumber","num","units","unitIndex","Math","floor","toString","length","shortenedNumber","pow","roundedNumber","toFixed"],"sources":["E:/D-Disk folders/office projects/barberly/frontend/src/utils/validators.js"],"sourcesContent":["export const validateOnlyChacters = (name) => {\r\n\tconst re = /^[a-zA-Z \\s]+$/;\r\n\treturn re.test(name);\r\n};\r\n\r\nexport const validatePassword = (password) => {\r\n\tconst re = /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[$@$!%*?&#])[A-Za-z\\d$@$!%*?&#]{7,}$/;\r\n\treturn re.test(password);\r\n  };\r\n\r\nexport const validateEmail = (email) => {\r\n\tconst re = /[a-zA-Z0-9!#$%&'*+=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n\treturn re.test(email);\r\n};\r\n\r\nexport const validatePhone = (phone) => {\r\n\t// const re = /^[0-9]{10}$/;\r\n\tconst re = /^[0-9]{10}$/;\r\n\treturn re.test(phone);\r\n};\r\n\r\nexport const validateUrl = (url) => {\r\n\tconst re = /[(http(s)?):(www.)?a-zA-Z0-9@:%._~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_.~#?&//=]*)/g;\r\n\treturn re.test(url);\r\n};\r\n\r\nexport const validateOnlyNumber = (name) => {\r\n\tconst re = /^[0-9 \\s]+$/;\r\n\treturn re.test(name);\r\n};\r\n\r\n\r\n\r\nexport const validateOnlyNumberDecimal = (name) => {\r\n\tconst re = /^[+-]?([0-9]+\\.?[5]*|\\.[0-9]+)$/;\r\n\treturn re.test(name);\r\n};\r\n\r\nexport const numberMasking = (e) => {\r\n\tlet value = e\r\n\tvalue = value.replace(/\\D/g, \"\")\r\n\t// value = value.replace(/(\\d{3})(\\d)/,\"$1-$2\")\r\n\t// value = value.replace(/(\\d{3})(\\d)/,\"$1-$2\")\r\n\tvalue = value.substr(0, 12)\r\n\r\n\treturn value\r\n};\r\n\r\nexport const inputPhoneMasking = (e) => {\r\n\tlet value = e\r\n\tif (value) {\r\n\t\tvalue = value.replace(/\\D/g, \"\")\r\n\t\tvalue = value.replace(/(\\d{3})(\\d)/, \"$1-$2\")\r\n\t\tvalue = value.replace(/(\\d{3})(\\d)/, \"$1-$2\")\r\n\t\tvalue = value.substr(0, 12)\r\n\t}\r\n\treturn value\r\n\r\n};\r\n\r\nexport const cardMasking = (e) => {\r\n\tlet value = e\r\n\tvalue = value.replace(/\\D/g, \"\")\r\n\tvalue = value.replace(/(\\d{4})(\\d)/, \"$1-$2\")\r\n\tvalue = value.replace(/(\\d{4})(\\d)/, \"$1-$2\")\r\n\tvalue = value.replace(/(\\d{4})(\\d)/, \"$1-$2\")\r\n\tvalue = value.substr(0, 19)\r\n\r\n\treturn value\r\n}\r\nexport const expiryMasking = (e) => {\r\n\tlet value = e\r\n\tvalue = value.replace(/\\D/g, \"\")\r\n\tvalue = value.replace(/(\\d{2})(\\d)/, \"$1-$2\")\r\n\tvalue = value.substr(0, 2)\r\n\r\n\treturn value\r\n}\r\nexport const cvvMasking = (e) => {\r\n\tlet value = e\r\n\tvalue = value.replace(/\\D/g, \"\")\r\n\tvalue = value.replace(/(\\d{3})(\\d)/, \"$1-$2\")\r\n\tvalue = value.substr(0, 3)\r\n\r\n\treturn value\r\n}\r\nexport const zipcodeMask = (e) => {\r\n\tlet value = e\r\n\tvalue = value.replace(/\\D/g, \"\")\r\n\tvalue = value.replace(/(\\d{5})(\\d)/, \"$1-$2\")\r\n\tvalue = value.substr(0, 5)\r\n\r\n\treturn value\r\n}\r\n\r\n\r\nexport const unMasking = (e) => {\r\n\tlet value = e\r\n\tvalue = value.replaceAll(\"-\", \"\")\r\n\r\n\treturn value\r\n}\r\n\r\nexport const formatNumber = (num) => {\r\n    if (num >= 1000) {\r\n        const units = ['K', 'M', 'B', 'T'];\r\n\r\n        const unitIndex = Math.floor((num / 1000).toString().length / 3) - 1;\r\n        const shortenedNumber = num / Math.pow(1000, unitIndex + 1);\r\n\r\n        // Round the number to one decimal place\r\n        const roundedNumber = Math.floor(shortenedNumber * 10) / 10;\r\n\r\n        return `${roundedNumber.toFixed(1)}${units[unitIndex]}`;\r\n    } else {\r\n        return num;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}