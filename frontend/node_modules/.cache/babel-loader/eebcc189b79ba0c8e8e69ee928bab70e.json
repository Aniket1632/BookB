{"ast":null,"code":"import axios from 'axios';\nimport { GET_ALL_NOTIFICATIONS_REQUEST, GET_ALL_NOTIFICATIONS_SUCCESS, GET_ALL_NOTIFICATIONS_FAIL, SEND_NOTIFICATION_REQUEST, SEND_NOTIFICATION_SUCCESS, SEND_NOTIFICATION_FAIL } from '../constants/notificationConstants';\nimport { BASE_URL } from './ip';\nexport const getAllNotificationsAction = (pageNumber = 1, pageSize = 5) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: GET_ALL_NOTIFICATIONS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        token: userInfo.data.token,\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.get(`${BASE_URL}/notification/get-notification?pageNumber=${pageNumber}&pageSize=${pageSize}`, config);\n    dispatch({\n      type: GET_ALL_NOTIFICATIONS_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_ALL_NOTIFICATIONS_FAIL,\n      payload: err.response && err.response.data.message ? err.response.data.message : err.message\n    });\n  }\n};\nexport const sendNotificationAction = formData => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: SEND_NOTIFICATION_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        token: userInfo.data.token,\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post(`${BASE_URL}/notification/send-notification?offset=-330`, formData, config);\n    dispatch({\n      type: SEND_NOTIFICATION_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: SEND_NOTIFICATION_FAIL,\n      payload: err.response && err.response.data.message ? err.response.data.message : err.message\n    });\n  }\n};","map":{"version":3,"names":["axios","GET_ALL_NOTIFICATIONS_REQUEST","GET_ALL_NOTIFICATIONS_SUCCESS","GET_ALL_NOTIFICATIONS_FAIL","SEND_NOTIFICATION_REQUEST","SEND_NOTIFICATION_SUCCESS","SEND_NOTIFICATION_FAIL","BASE_URL","getAllNotificationsAction","pageNumber","pageSize","dispatch","getState","type","userLogin","userInfo","config","headers","token","data","get","payload","err","response","message","sendNotificationAction","formData","post"],"sources":["E:/D-Disk folders/office projects/barberly/frontend/src/redux/actions/notificationActions.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n\tGET_ALL_NOTIFICATIONS_REQUEST,\r\n\tGET_ALL_NOTIFICATIONS_SUCCESS,\r\n\tGET_ALL_NOTIFICATIONS_FAIL,\r\n\tSEND_NOTIFICATION_REQUEST,\r\n\tSEND_NOTIFICATION_SUCCESS,\r\n\tSEND_NOTIFICATION_FAIL\r\n} from '../constants/notificationConstants';\r\nimport { BASE_URL } from './ip';\r\n\r\nexport const getAllNotificationsAction = (pageNumber = 1, pageSize = 5) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: GET_ALL_NOTIFICATIONS_REQUEST });\r\n\r\n\t\tconst { userLogin: { userInfo } } = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\ttoken: userInfo.data.token,\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.get(\r\n\t\t\t`${BASE_URL}/notification/get-notification?pageNumber=${pageNumber}&pageSize=${pageSize}`,\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: GET_ALL_NOTIFICATIONS_SUCCESS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: GET_ALL_NOTIFICATIONS_FAIL,\r\n\t\t\tpayload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const sendNotificationAction = (formData) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({ type: SEND_NOTIFICATION_REQUEST });\r\n\r\n\t\tconst { userLogin: { userInfo } } = getState();\r\n\r\n\t\tconst config = {\r\n\t\t\theaders: {\r\n\t\t\t\ttoken: userInfo.data.token,\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst { data } = await axios.post(`${BASE_URL}/notification/send-notification?offset=-330`, formData, config);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: SEND_NOTIFICATION_SUCCESS,\r\n\t\t\tpayload: data\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: SEND_NOTIFICATION_FAIL,\r\n\t\t\tpayload: err.response && err.response.data.message ? err.response.data.message : err.message\r\n\t\t});\r\n\t}\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACCC,6BAA6B,EAC7BC,6BAA6B,EAC7BC,0BAA0B,EAC1BC,yBAAyB,EACzBC,yBAAyB,EACzBC,sBAAsB,QAChB,oCAAoC;AAC3C,SAASC,QAAQ,QAAQ,MAAM;AAE/B,OAAO,MAAMC,yBAAyB,GAAGA,CAACC,UAAU,GAAG,CAAC,EAAEC,QAAQ,GAAG,CAAC,KAAK,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACxG,IAAI;IACHD,QAAQ,CAAC;MAAEE,IAAI,EAAEZ;IAA8B,CAAC,CAAC;IAEjD,MAAM;MAAEa,SAAS,EAAE;QAAEC;MAAS;IAAE,CAAC,GAAGH,QAAQ,CAAC,CAAC;IAE9C,MAAMI,MAAM,GAAG;MACdC,OAAO,EAAE;QACRC,KAAK,EAAEH,QAAQ,CAACI,IAAI,CAACD,KAAK;QAC1B,cAAc,EAAE;MACjB;IACD,CAAC;IAED,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAC9B,GAAEb,QAAS,6CAA4CE,UAAW,aAAYC,QAAS,EAAC,EACzFM,MACD,CAAC;IAEDL,QAAQ,CAAC;MACRE,IAAI,EAAEX,6BAA6B;MACnCmB,OAAO,EAAEF;IACV,CAAC,CAAC;EACH,CAAC,CAAC,OAAOG,GAAG,EAAE;IACbX,QAAQ,CAAC;MACRE,IAAI,EAAEV,0BAA0B;MAChCkB,OAAO,EAAEC,GAAG,CAACC,QAAQ,IAAID,GAAG,CAACC,QAAQ,CAACJ,IAAI,CAACK,OAAO,GAAGF,GAAG,CAACC,QAAQ,CAACJ,IAAI,CAACK,OAAO,GAAGF,GAAG,CAACE;IACtF,CAAC,CAAC;EACH;AACD,CAAC;AAED,OAAO,MAAMC,sBAAsB,GAAIC,QAAQ,IAAK,OAAOf,QAAQ,EAAEC,QAAQ,KAAK;EACjF,IAAI;IACHD,QAAQ,CAAC;MAAEE,IAAI,EAAET;IAA0B,CAAC,CAAC;IAE7C,MAAM;MAAEU,SAAS,EAAE;QAAEC;MAAS;IAAE,CAAC,GAAGH,QAAQ,CAAC,CAAC;IAE9C,MAAMI,MAAM,GAAG;MACdC,OAAO,EAAE;QACRC,KAAK,EAAEH,QAAQ,CAACI,IAAI,CAACD,KAAK;QAC1B,cAAc,EAAE;MACjB;IACD,CAAC;IAED,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMnB,KAAK,CAAC2B,IAAI,CAAE,GAAEpB,QAAS,6CAA4C,EAAEmB,QAAQ,EAAEV,MAAM,CAAC;IAE7GL,QAAQ,CAAC;MACRE,IAAI,EAAER,yBAAyB;MAC/BgB,OAAO,EAAEF;IACV,CAAC,CAAC;EACH,CAAC,CAAC,OAAOG,GAAG,EAAE;IACbX,QAAQ,CAAC;MACRE,IAAI,EAAEP,sBAAsB;MAC5Be,OAAO,EAAEC,GAAG,CAACC,QAAQ,IAAID,GAAG,CAACC,QAAQ,CAACJ,IAAI,CAACK,OAAO,GAAGF,GAAG,CAACC,QAAQ,CAACJ,IAAI,CAACK,OAAO,GAAGF,GAAG,CAACE;IACtF,CAAC,CAAC;EACH;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}